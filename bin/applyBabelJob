#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    util = require('util'),
    _ = require('lodash'),
    extend = require('extend'),
    AssetGraph = require('../lib/AssetGraph'),
    i18nTools = require('../lib/i18nTools'),
    pluralsCldr = require('plurals-cldr'),
    urlTools = require('urltools'),
    commandLineOptions = require('optimist')
        .usage('$0 [--label <labelName>=<dir> ...] [--parentdir] [--i18n <pathToI18nFile>] [--locales <localeId>[,<localeId>...]] [--defaultlocale <localeId>] --babeldir=<dirContainingTheBabelFilesToApply> --root <inputRootDirectory> <htmlFile>...')
        .boolean('parentdir')
        .options('defaultlocale', {
            describe: 'The locale of the default value in TR statements and tags with a data-i18n attribute',
            type: 'string',
            default: 'en'
        })
        .options('replace', {
            describe: 'Replace the data-i18n attributes, TR and TRPAT expressions in the original source code with the default locale keys in the translation job (experimental)',
            type: 'boolean',
            default: false
        })
        .demand(['root', 'babeldir'])
        .argv,
    localeIds = commandLineOptions.locales && _.flatten(_.flatten([commandLineOptions.locales]).map(function (localeId) {
        return localeId.split(',');
    })).map(i18nTools.normalizeLocaleId),
    initialAssetUrls = commandLineOptions._.map(urlTools.fsFilePathToFileUrl),
    originalTextByAssetId = {},
    defaultLocaleId,
    i18nUrl;

if (commandLineOptions.defaultlocale) {
    defaultLocaleId = i18nTools.normalizeLocaleId(commandLineOptions.defaultlocale);
    if (localeIds && localeIds.indexOf(defaultLocaleId) === -1) {
        throw new Error('The default locale id (' + defaultLocaleId + ') is not among the locales listed with the --locales switch (' + localeIds.join(', ') + ')');
    }
} else if (localeIds) {
    defaultLocaleId = localeIds[0];
}

function isArrayOrObject(obj) {
    return Array.isArray(obj) || (obj && typeof obj === 'object');
}

if (commandLineOptions.i18n) {
    i18nUrl = urlTools.fsFilePathToFileUrl(commandLineOptions.i18n);
    initialAssetUrls.push(i18nUrl);
}

new AssetGraph({root: commandLineOptions.root})
    .on('addAsset', function (asset) {
        asset.once('load', function () {
            originalTextByAssetId[asset.id] = asset.text;
        });
    })
    .logEvents({repl: commandLineOptions.repl, stopOnWarning: commandLineOptions.stoponwarning, suppressJavaScriptCommonJsRequireWarnings: true})
    .registerLabelsAsCustomProtocols(commandLineOptions.label, {installFindParentDirectoryAsDefault: commandLineOptions.parentdir})
    .loadAssets(initialAssetUrls)
    .populate({from: {type: 'Html'}, followRelations: {type: 'HtmlScript', to: {url: /^file:/}}})
    .bundleSystemJs({ sourceMaps: true })
    .bundleRequireJs({ sourceMaps: true })
    .serializeSourceMaps()
    .populate({ startAssets: { type: 'SourceMap' }, followRelations: { to: { url: /^file:\// } } })
    .populate({
        followRelations: {
            type: AssetGraph.query.not(['HtmlAnchor', 'HtmlMetaRefresh']),
            to: {url: AssetGraph.query.not(/^https?:/)}
        }
    })
    .queue(function importLanguageKeys(assetGraph) {
        var translationsByKeyAndLocaleId = {},
            occurrencesByKey = i18nTools.findOccurrences(assetGraph, assetGraph.findAssets({type: 'Html', isInitial: true})),
            i18nAssetForAllKeys;

        if (i18nUrl) {
            i18nAssetForAllKeys = assetGraph.findAssets({url: i18nUrl})[0];
            if (!i18nAssetForAllKeys) {
                i18nAssetForAllKeys = new AssetGraph.I18n({
                    url: i18nUrl,
                    isDirty: true,
                    parseTree: {}
                });
                assetGraph.addAsset(i18nAssetForAllKeys);
                assetGraph.emit('info', '--i18n ' + commandLineOptions.i18n + ' not found, creating it');
            }
        }

        var isSeenByLocaleId = {};

        fs.readdirSync(commandLineOptions.babeldir).forEach(function (fileName) {
            if (fileName === 'SOURCE.txt') {
                console.warn('Skipping ' + fileName);
            } else {
                var matchLocaleId = fileName.match(/^([a-zA-Z0-9\-\_]+)\.(?:txt|babel)$/);
                if (matchLocaleId) {
                    var localeId = i18nTools.normalizeLocaleId(matchLocaleId[1]),
                        babelBody = fs.readFileSync(path.resolve(commandLineOptions.babeldir, fileName), 'utf-8');

                    isSeenByLocaleId[localeId] = true;

                    if (localeIds && localeIds.indexOf(localeId) === -1) {
                        console.warn('Skipping ' + fileName + ' because ' + localeId + ' was not mentioned in --locales');
                        return;
                    }

                    babelBody.split(/\r?\n|\r\n?/).forEach(function (line, lineNumber) {
                        if (!/^\s*\#|^\s*$/.test(line)) { // Skip comments and empty lines
                            var matchKeyValue = line.match(/^([^=]+)=(.*)$/);
                            if (matchKeyValue) {
                                var key = matchKeyValue[1].trim(),
                                    value = matchKeyValue[2].trim().replace(/\\([n\\])/g, function ($0, ch) {
                                        return ch === 'n' ? '\n' : ch;
                                    }),
                                    path = [];

                                // If the value looks like a number, we want it to be a number in our JSON representation
                                if (/^(?:[1-9][0-9]*(?:\.[0-9]*)?)$/.test(value)) { // Doesn't match ".nnn", "n." or exponential notation (on purpose)
                                    value = parseFloat(value);
                                }
                                // Chop off [x][y]... suffix and note the components in the 'path' array
                                key = key.replace(/\[([^\]]+)\]/g, function ($0, pathComponent) {
                                    path.push(pathComponent);
                                    return '';
                                });
                                if (!(key in translationsByKeyAndLocaleId)) {
                                    translationsByKeyAndLocaleId[key] = {};
                                }
                                path.unshift(localeId);
                                var cursor = translationsByKeyAndLocaleId[key];
                                while (path.length > 1) {
                                    if (/^(?:[0-9]|[1-9][0-9]*)$/.test(path[1])) {
                                        // Integer path component, assume that cursor[nextIndex] should be an array
                                        if (typeof cursor[path[0]] === 'undefined') {
                                            cursor[path[0]] = [];
                                        } else if (!Array.isArray(cursor[path[0]])) {
                                            throw new Error('Error: Expected ' + JSON.stringify(cursor) + '[\'' + path[0] + '\'] ' +
                                                            'to be undefined or an array while processing line ' + lineNumber + ' of ' + fileName + ':\n' + line);
                                        }
                                    } else {
                                        // typeof path[1] === 'string', assume that cursor[path[0]] should be an object
                                        if (typeof cursor[path[0]] === 'undefined') {
                                            cursor[path[0]] = {};
                                        } else if (typeof cursor[path[0]] !== 'object' || cursor[path[0]] === null) {
                                            throw new Error('Error: Expected ' + JSON.stringify(cursor) + '[\'' + path[0] + '\'] ' +
                                                            'to be undefined or an object while processing line ' + lineNumber + ' of ' + fileName + ':\n' + line);
                                        }
                                    }
                                    cursor = cursor[path.shift()];
                                }
                                if (path[0] in cursor) {
                                    throw new Error('Error: Found double declaration of key in line ' + lineNumber + ' of ' + fileName + ':\n' + line);
                                }
                                cursor[path[0]] = value;
                            } else {
                                console.warn('Couldn\'t parse line ' + (lineNumber + 1) + ' of the ' + localeId + ' file: ' + line);
                            }
                        }
                    });
                } else {
                    console.warn('Skipping file whose basename does not look like a locale id: ' + fileName);
                }
            }
        });
        if (localeIds) {
            localeIds.forEach(function (localeId) {
                if (!isSeenByLocaleId[localeId]) {
                    console.warn(localeId + '.txt was not found although --locales ' + localeId + ' was specified');
                }
            });
        }
        var secondaryI18nAssets = assetGraph.findAssets({
            type: 'I18n'
        }).filter(function (asset) {
            return asset !== i18nAssetForAllKeys;
        });

        Object.keys(translationsByKeyAndLocaleId).forEach(function (key) {
            var translationsByLocaleId = translationsByKeyAndLocaleId[key];
            Object.keys(translationsByLocaleId).forEach(function (localeId) {
                var value = translationsByLocaleId[localeId];
                // Mostly copied from coalescePluralsToLocale
                translationsByLocaleId[localeId] = (function traverse(obj) {
                    if (Array.isArray(obj)) {
                        return obj.map(traverse);
                    } else if (typeof obj === 'object' && obj !== null) {
                        var coalescedObj = {},
                            keys = Object.keys(obj);
                        if (keys.length > 0 && keys.every(function (key) {
                            return ['zero', 'one', 'two', 'few', 'many', 'other'].indexOf(key) !== -1;
                        })) {
                            keys = [];
                            pluralsCldr.forms(localeId).forEach(function (pluralForm) {
                                coalescedObj[pluralForm] = obj[pluralForm];
                                keys.push(pluralForm);
                            });
                            if (Object.keys(obj).length > keys.length) {
                                console.log(key + ': Discarding plural forms not used in ' + localeId + ':', obj, '=>', coalescedObj);
                            }
                            obj = coalescedObj;
                        }
                        keys.forEach(function (propertyName) {
                            coalescedObj[propertyName] = traverse(obj[propertyName]);
                        });
                        return coalescedObj;
                    } else {
                        return obj;
                    }
                }(value));
            });
        });

        Object.keys(translationsByKeyAndLocaleId).forEach(function (key) {
            var i18nAsset;
            if (i18nAssetForAllKeys && !(key in i18nAssetForAllKeys.parseTree)) {
                // Even if a i18nAssetForAllKeys (--i18n ...) is defined, another .i18n we should prefer another file with that key already defined:
                if (secondaryI18nAssets.length > 0) {
                    for (var i = 0 ; i < secondaryI18nAssets.length ; i += 1) {
                        if (key in secondaryI18nAssets[i].parseTree) {
                            i18nAsset = secondaryI18nAssets[i];
                            break;
                        }
                    }
                }
                if (!i18nAsset) {
                    i18nAsset = i18nAssetForAllKeys;
                }
            } else {
                try {
                    i18nAsset = i18nAssetForAllKeys || i18nTools.getOrCreateI18nAssetForKey(assetGraph, key, occurrencesByKey);
                } catch (e) {
                    console.warn('Skipping language key: ' + e.message);
                }
            }
            if (i18nAsset) {
                if (!(key in i18nAsset.parseTree)) {
                    i18nAsset.parseTree[key] = {};
                    i18nAsset.markDirty();
                }
                Object.keys(translationsByKeyAndLocaleId[key]).forEach(function (localeId) {
                    var newTranslation = translationsByKeyAndLocaleId[key][localeId],
                        existingTranslation = i18nAsset.parseTree[key][localeId];

                    function setMergedTranslation(mergedTranslation) {
                        i18nAsset.parseTree[key][localeId] = mergedTranslation;
                        i18nAsset.markDirty();
                    }

                    if (isArrayOrObject(existingTranslation) && isArrayOrObject(existingTranslation)) {
                        // Do a 'deep extend' to update existing complex value:
                        setMergedTranslation(extend(true, existingTranslation, newTranslation));
                    } else if (typeof existingTranslation === 'undefined' ||
                               isArrayOrObject(existingTranslation) !== isArrayOrObject(newTranslation) ||
                               existingTranslation !== newTranslation) {
                        setMergedTranslation(newTranslation);
                    }
                });
            }
        });

        if (commandLineOptions.replace) {
            var allKeysInDefaultLocale = {},
                replacedTextByAssetId = {};
            Object.keys(translationsByKeyAndLocaleId).forEach(function (key) {
                i18nTools.expandLocaleIdToPrioritizedList(defaultLocaleId).some(function (localeId) {
                    if (localeId in translationsByKeyAndLocaleId[key]) {
                        allKeysInDefaultLocale[key] = translationsByKeyAndLocaleId[key][localeId];
                        return true;
                    }
                });
            });

            // Replace data-i18n in Html assets first:
            var i18nTagReplacer = i18nTools.createI18nTagReplacer({
                allKeysForLocale: allKeysInDefaultLocale,
                localeId: defaultLocaleId,
                keepSpans: true,
                keepI18nAttributes: true
            });
            assetGraph.findAssets({type: 'Html'}).forEach(function (htmlAsset) {
                var hasOccurrences = false;
                i18nTools.eachI18nTagInHtmlDocument(htmlAsset.parseTree, function (options) {
                    if (options.key in allKeysInDefaultLocale && !_.isEqual(options.defaultValue, allKeysInDefaultLocale[options.key])) {
                        hasOccurrences = true;
                        i18nTagReplacer(options);
                    }
                });
                if (hasOccurrences) {
                    htmlAsset.hasReplacedLanguageKeys = true;
                    htmlAsset.markDirty();
                    replacedTextByAssetId[htmlAsset.nonInlineAncestor.id] = htmlAsset.nonInlineAncestor.text;
                }
            });

            // Then regexp TR and TRPAT in JavaScript assets. This has to happen last because it regexps directly on the source:
            Object.keys(translationsByKeyAndLocaleId).forEach(function (key) {
                if (defaultLocaleId && defaultLocaleId in translationsByKeyAndLocaleId[key]) {
                    var occurrences = occurrencesByKey[key] || [];
                    (occurrences || []).forEach(function (occurrence) {
                        if (!_.isEqual(occurrence.defaultValue, allKeysInDefaultLocale[occurrence.key])) {
                            if (occurrence.type === 'TR' || occurrence.type === 'TRPAT') {
                                var asset = occurrence.asset.nonInlineAncestor,
                                    replaceRegExp = new RegExp('(TR(?:PAT)?\\(([\'"])' + key.replace(/[\.\[\]\*\+\?\{\}\(\)\^\$]/g, '\\$&') + '\\2\\s*,\\s*)(?:[^)\'"]*|"[^"]*"|\'[^\']*\')*?\\)', 'g');

                                replacedTextByAssetId[asset.id] = (replacedTextByAssetId[asset.id] || originalTextByAssetId[asset.id] || asset.text)
                                    .replace(replaceRegExp,
                                             '$1' + util.inspect(translationsByKeyAndLocaleId[key][defaultLocaleId]) + ')');
                            }
                        }
                    });
                }
            });
            Object.keys(replacedTextByAssetId).forEach(function (assetId) {
                var asset = assetGraph.idIndex[assetId],
                    replacedText = replacedTextByAssetId[assetId];
                asset.keepUnpopulated = true;
                if (asset.type === 'Html') {
                    // Un-entitify < > & in data-bind and data-htmlizer attributes (common intentional spec breakage in development):
                    asset.keepUnpopulated = true;
                    replacedText = replacedText.replace(/(?:data-htmlizer|data-bind)="[^"]*"/g, function ($0) {
                        return $0.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
                    });
                }
                asset._rawSrc = replacedText.toString('utf-8');
                asset.hasReplacedLanguageKeys = true;
            });
        }
    })
    .prettyPrintAssets({type: 'I18n', isDirty: true})
    .writeStatsToStderr()
    .writeAssetsToDisc({type: 'I18n', isDirty: true})
    .if(commandLineOptions.replace)
        .writeAssetsToDisc({type: ['JavaScript', 'Html'], hasReplacedLanguageKeys: true})
    .endif()
    .run();
